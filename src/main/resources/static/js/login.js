// Wrap every letter in a span
var textWrapper = document.querySelector('.ml11 .letters');
textWrapper.innerHTML = textWrapper.textContent.replace(/([^\x00-\x80]|\w|!|ðŸ‘‹)/g, "<span class='letter'>$&</span>");

anime.timeline({loop: true})
    .add({
        targets: '.ml11 .line',
        scaleY: [0, 1],
        opacity: [0.5, 1],
        easing: "easeOutExpo",
        duration: 700
    })
    .add({
        targets: '.ml11 .line',
        translateX: [0, document.querySelector('.ml11 .letters').getBoundingClientRect().width + 10],
        easing: "easeOutExpo",
        duration: 700,
        delay: 100
    })
    .add({
        targets: '.ml11 .letter',
        opacity: [0, 1],
        easing: "easeOutExpo",
        duration: 600,
        offset: '-=775',
        delay: (el, i) => 34 * (i + 1)
    })
    .add({
        targets: '.ml11',
        opacity: 0,
        duration: 1000,
        easing: "easeOutExpo",
        delay: 1000
    });






// Fonction pour gÃ©rer la connexion d'un utilisateur
function handleLogin(event) {
    event.preventDefault(); // EmpÃªche le rechargement de la page lors de la soumission du formulaire

    // RÃ©cupÃ©rer les valeurs des champs email et mot de passe
    const email = document.getElementById('email').value;
    const password = document.getElementById('password').value;

    // CrÃ©er un objet utilisateur contenant les donnÃ©es du formulaire
    const user = {
        email: email,
        password: password
    }

    // Afficher les donnÃ©es dans la console pour dÃ©bogage
    console.log("DonnÃ©es envoyÃ©es :", user);

    // Envoyer une requÃªte POST pour authentifier l'utilisateur via l'API
    fetch('/api/users/login', {
        method: 'POST', // MÃ©thode HTTP pour envoyer des donnÃ©es
        headers: {
            'Content-Type': 'application/json' // Indiquer que les donnÃ©es envoyÃ©es sont en JSON
        },
        body: JSON.stringify(user) // Convertir l'objet utilisateur en chaÃ®ne JSON
    })
        .then(response => {
            if (!response.ok) { // VÃ©rifier si la rÃ©ponse de l'API est incorrecte
                alert('Invalid username or password'); // Afficher une alerte si les informations sont invalides
            }
            return response.json(); // Convertir la rÃ©ponse en JSON
        })
        .then((response) => {
            // Enregistrer l'utilisateur connectÃ© dans le stockage local
            localStorage.setItem('connectedUser', JSON.stringify(response));

            // Rediriger l'utilisateur vers la page principale aprÃ¨s connexion
            window.location.href = 'index.html';
        })
        .catch((error) => {
            // GÃ©rer les erreurs si la requÃªte Ã©choue
            console.error('Post request Error:', error);
        });
}

// Attacher un gestionnaire d'Ã©vÃ©nements pour le formulaire de connexion
const loginForm = document.getElementById('loginForm');
loginForm.addEventListener('submit', handleLogin); // Appeler `handleLogin` lors de la soumission du formulaire
